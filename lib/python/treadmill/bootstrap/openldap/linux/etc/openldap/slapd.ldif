#
# See slapd-config(5) for details on configuration options.
# This file should NOT be world readable.
#
{# Most empty lines in this file are meaningful #}
dn: cn=config
objectClass: olcGlobal
cn: config
entryCSN: 19700000000000.000000Z#000000#000#000000
{%- for attribute_option in attribute_options %}
olcAttributeOptions: {{ attribute_option }}
{%- endfor %}
olcArgsFile: {{ dir }}/run/slapd.args
olcPidFile: {{ dir }}/run/slapd.pid

{%- if is_master %}
{%- for master in masters %}
olcServerID: {{ loop.index }} {{ master }}
{%- endfor %}
{%- endif %}
olcIdleTimeout: {{ idletimout | default(0) }}

#
# schema
#
dn: cn=schema,cn=config
objectClass: olcSchemaConfig
cn: schema
entryCSN: 19700000000000.000000Z#000000#000#000000
{% for schema_file in schemas %}
include: {{ schema_file}}
{%- endfor %}

{%- macro if_exists(name, value) %}
{%- if value %}
{{ name }}: {{ value }}
{%- endif %}
{%- endmacro %}{# if_exists() #}

{%- macro access_rights(user) %}
olcAccess: to *
{%- if user %}
  by dn.base=uid={{ user }},cn=gssapi,cn=auth write
{%- endif %}
  by users read
  by * none
{%- endmacro %}{# access_rights() #}

{%- macro replication_provider(backend, masters, replica_ids) %}
{#-
    All master backends are in N-way multi-master replication - olcSyncRepl with syncprov overlay.
#}
{%- for master in masters %}
{% if uri == master %}#{% endif %}olcSyncRepl: rid={{ replica_ids.next() }} provider={{ master }}
{% if uri == master %}#{% endif %}  searchbase="{{ backend.syncrepl_searchbase }}"
{% if uri == master %}#{% endif %}  type=refreshAndPersist retry="5 12 60 +" timeout=1
{% if uri == master %}#{% endif %}  bindmethod=sasl
{%- endfor %}
{%- if (masters|length) > 1 %}
olcMirrorMode: TRUE
{%- endif %}

dn: olcOverlay=syncprov,olcDatabase={{ backend.name }},cn=config
objectClass: olcOverlayConfig
objectClass: olcSyncProvConfig
olcOverlay: syncprov
entryCSN: 19700000000000.000000Z#000000#000#000000
{%- endmacro %}{# replication_provider() #}

{%- macro replication_consumer(backend, masters, replica_ids) %}
{#-
    Standard replication consumer - olcSyncRepl with olcUpdateref.
#}
{%- for master in masters %}
olcSyncRepl: rid={{ replica_ids.next() }} provider={{ master }}
  searchbase="{{ backend.syncrepl_searchbase }}"
  type=refreshAndPersist retry="5 12 60 +" timeout=1
  bindmethod=sasl
{%- endfor %}
{%- for master in masters %}
olcUpdateref: {{ master }}
{%- endfor %}
{%- endmacro %}{# replication_consumer() #}

{%- macro backend_config(backend, replica_ids) %}
{#-
    Render the entry for a database backend
#}

#
# backend: {{ backend.name }} ({{ backend.suffix }})
#
dn: olcDatabase={{ backend.name }},cn=config
objectClass: olcDatabaseConfig
entryCSN: 19700000000000.000000Z#000000#000#000000
{{- if_exists('objectClass', backend.objectclass) }}
olcDatabase: {{ backend.name }}
{%- if backend.objectclass == "olcMdbConfig" %}
olcDbDirectory: {{ dir }}/openldap-data
olcSuffix: {{ backend.suffix }}
{%- endif %}
{{- if_exists('olcDbMaxSize', backend.maxsize) }}

{#- Access rights #}
olcRootDN: {{ backend.rootdn }}
{{- if_exists('olcRootPW', rootpw) }}
{%- if gssapi %}{{ access_rights(backend.owner) }}{%- endif %}

{#- Authentication requirements #}
{%- if backend.requires %}
{%- for r in backend.requires %}
olcRequires: {{ r }}
{%- endfor %}
{%- endif %}

{#- Limits #}
olcLimits: dn.exact="{{ backend.rootdn }}" time.soft=unlimited time.hard=unlimited size.soft=unlimited size.hard=unlimited size.pr=unlimited size.prtotal=unlimited
{%- if gssapi %}
olcLimits: dn.base=uid={{ backend.owner }},cn=gssapi,cn=auth time.soft=unlimited time.hard=unlimited size.soft=unlimited size.hard=unlimited size.pr=unlimited size.prtotal=unlimited
{%- endif %}
olcSizeLimit: size.soft={{ backend.size_limit | default(500) }} size.hard={{ backend.size_limit | default(500) }} size.pr=unlimited size.prtotal=unlimited
olcTimeLimit: {{ backend.time_limit | default(3600) }}

{#- Indexing #}
{%- if backend.index %}
{%- for attr, kind in backend.index.items() %}
olcDbIndex: {{ attr }} {{ kind }}
{%- endfor %}
{%- endif %}

{#- Replication #}
{%- if is_master %}
    {{- replication_provider(backend, masters, replica_ids) }}
{%- else %}
    {{- replication_consumer(backend, masters, replica_ids) }}
{%- endif %}
{%- endmacro %}{# backend_config() #}

{%- set replica_ids = cycler(*range(1, (backends|length) * (masters|length) + 1 if masters else 2)) %}
{%- for backend in backends %}
    {{- backend_config(backend, replica_ids) }}
{%- endfor %}
